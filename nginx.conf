# ==========================================
# Nginx 리버스 프록시 설정 (선택사항)
# HTTPS 및 도메인 사용 시 활성화
# ==========================================

events {
    worker_connections 1024;
}

http {
    # 기본 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 로깅
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;
    
    # 업스트림 서버 (Next.js 애플리케이션)
    upstream nextjs_app {
        server youtube-comments-app:3000;
    }
    
    # HTTP -> HTTPS 리다이렉트 (SSL 사용 시)
    server {
        listen 80;
        server_name your-domain.com;  # 실제 도메인으로 변경
        
        # Let's Encrypt 인증서 갱신을 위한 경로
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # 나머지는 HTTPS로 리다이렉트
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # HTTPS 서버 (SSL 인증서 설정 필요)
    server {
        listen 443 ssl http2;
        server_name your-domain.com;  # 실제 도메인으로 변경
        
        # SSL 인증서 (Let's Encrypt 또는 자체 인증서)
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # SSL 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        
        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Next.js 애플리케이션으로 프록시
        location / {
            proxy_pass http://nextjs_app;
            proxy_http_version 1.1;
            
            # 헤더 설정
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_cache_bypass $http_upgrade;
            
            # 타임아웃 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # 헬스체크
        location /api/health {
            proxy_pass http://nextjs_app/api/health;
            access_log off;
        }
        
        # 정적 파일 캐싱
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://nextjs_app;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # HTTP 전용 서버 (SSL 없이 사용 시)
    # 위의 HTTPS 서버 블록을 주석 처리하고 이 블록을 사용하세요
    # server {
    #     listen 80;
    #     server_name your-domain.com;
    #     
    #     location / {
    #         proxy_pass http://nextjs_app;
    #         proxy_http_version 1.1;
    #         
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection 'upgrade';
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         proxy_cache_bypass $http_upgrade;
    #     }
    # }
}

